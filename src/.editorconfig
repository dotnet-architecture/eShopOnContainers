# Remove the line below if you want to inherit .editorconfig settings from higher directories
root = true

# C# files
[*.cs]

#### Core EditorConfig Options ####

# Indentation and spacing
indent_size = 5
indent_style = tab
tab_width = 5

# New line preferences
end_of_line = crlf
insert_final_newline = false

#### .NET Coding Conventions ####

# Organize usings
dotnet_separate_import_directive_groups = true
dotnet_sort_system_directives_first = true

# this. and Me. preferences
dotnet_style_qualification_for_event = false:warning
dotnet_style_qualification_for_field = false:warning
dotnet_style_qualification_for_method = false:warning
dotnet_style_qualification_for_property = false:warning

# Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent
dotnet_style_parentheses_in_relational_binary_operators = never_if_unnecessary:silent

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members:silent

# Expression-level preferences
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_collection_initializer = true:warning
dotnet_style_explicit_tuple_names = true:warning
dotnet_style_null_propagation = true:suggestion
dotnet_style_object_initializer = true:warning
dotnet_style_prefer_auto_properties = true:warning
dotnet_style_prefer_compound_assignment = true:warning
dotnet_style_prefer_conditional_expression_over_assignment = true:warning
dotnet_style_prefer_conditional_expression_over_return = true:warning
dotnet_style_prefer_inferred_anonymous_type_member_names = true:warning
dotnet_style_prefer_inferred_tuple_names = true:warning
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion

# Field preferences
dotnet_style_readonly_field = true:suggestion

# Parameter preferences
dotnet_code_quality_unused_parameters = non_public:warning

#### C# Coding Conventions ####

# var preferences
csharp_style_var_elsewhere = true:warning
csharp_style_var_for_built_in_types = true:warning
csharp_style_var_when_type_is_apparent = true:warning

# Expression-bodied members
csharp_style_expression_bodied_accessors = true:suggestion
csharp_style_expression_bodied_constructors = true:suggestion
csharp_style_expression_bodied_indexers = true:suggestion
csharp_style_expression_bodied_lambdas = true:suggestion
csharp_style_expression_bodied_local_functions = true:suggestion
csharp_style_expression_bodied_methods = true:warning
csharp_style_expression_bodied_operators = true:suggestion
csharp_style_expression_bodied_properties = true:suggestion

# Pattern matching preferences
csharp_style_pattern_matching_over_as_with_null_check = true:warning
csharp_style_pattern_matching_over_is_with_cast_check = true:warning
csharp_style_prefer_switch_expression = true:warning

# Null-checking preferences
csharp_style_conditional_delegate_call = true:suggestion

# Modifier preferences
csharp_prefer_static_local_function = true:suggestion
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async

# Code-block preferences
csharp_prefer_braces = false:warning
csharp_prefer_simple_using_statement = false:error

# Expression-level preferences
csharp_prefer_simple_default_expression = true:warning
csharp_style_deconstructed_variable_declaration = true:warning
csharp_style_inlined_variable_declaration = true:warning
csharp_style_pattern_local_over_anonymous_function = true:warning
csharp_style_prefer_index_operator = true:warning
csharp_style_prefer_range_operator = true:warning
csharp_style_throw_expression = true:suggestion
csharp_style_unused_value_assignment_preference = discard_variable:silent
csharp_style_unused_value_expression_statement_preference = discard_variable:silent

# 'using' directive preferences
csharp_using_directive_placement = outside_namespace:warning

#### C# Formatting Rules ####

# New line preferences
csharp_new_line_before_catch = true
csharp_new_line_before_else = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_open_brace = all
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = false
csharp_indent_case_contents_when_block = false
csharp_indent_labels = one_less_than_current
csharp_indent_switch_labels = true

# Space preferences
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Wrapping preferences
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = true

#### Naming styles ####

# Naming rules

dotnet_naming_rule.interface_should_be_begins_with_i.severity = suggestion
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i

dotnet_naming_rule.types_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.non_field_members_should_be_camel_case.severity = suggestion
dotnet_naming_rule.non_field_members_should_be_camel_case.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_camel_case.style = camel_case

dotnet_naming_rule.enum_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.enum_should_be_pascal_case.symbols = enum
dotnet_naming_rule.enum_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.struct_should_be_camel_case.severity = suggestion
dotnet_naming_rule.struct_should_be_camel_case.symbols = struct
dotnet_naming_rule.struct_should_be_camel_case.style = camel_case

dotnet_naming_rule.delegate_should_be_lower.severity = suggestion
dotnet_naming_rule.delegate_should_be_lower.symbols = delegate
dotnet_naming_rule.delegate_should_be_lower.style = lower

dotnet_naming_rule.method_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.method_should_be_pascal_case.symbols = method
dotnet_naming_rule.method_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.private_method_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.private_method_should_be_pascal_case.symbols = private_method
dotnet_naming_rule.private_method_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.abstract_method_should_be_camel_case.severity = suggestion
dotnet_naming_rule.abstract_method_should_be_camel_case.symbols = abstract_method
dotnet_naming_rule.abstract_method_should_be_camel_case.style = camel_case

dotnet_naming_rule.static_method_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.static_method_should_be_pascal_case.symbols = static_method
dotnet_naming_rule.static_method_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.property_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.property_should_be_pascal_case.symbols = property
dotnet_naming_rule.property_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.public_or_protected_field_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.public_or_protected_field_should_be_pascal_case.symbols = public_or_protected_field
dotnet_naming_rule.public_or_protected_field_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.static_field_should_be_all_caps.severity = suggestion
dotnet_naming_rule.static_field_should_be_all_caps.symbols = static_field
dotnet_naming_rule.static_field_should_be_all_caps.style = all_caps

dotnet_naming_rule.private_or_internal_field_should_be_private_fields.severity = suggestion
dotnet_naming_rule.private_or_internal_field_should_be_private_fields.symbols = private_or_internal_field
dotnet_naming_rule.private_or_internal_field_should_be_private_fields.style = private_fields

dotnet_naming_rule.private_or_internal_static_field_should_be_private_static.severity = suggestion
dotnet_naming_rule.private_or_internal_static_field_should_be_private_static.symbols = private_or_internal_static_field
dotnet_naming_rule.private_or_internal_static_field_should_be_private_static.style = private_static

dotnet_naming_rule.async_methods__public__should_be_suffixedwithasync.severity = suggestion
dotnet_naming_rule.async_methods__public__should_be_suffixedwithasync.symbols = async_methods__public_
dotnet_naming_rule.async_methods__public__should_be_suffixedwithasync.style = suffixedwithasync

dotnet_naming_rule.non_public_async_methods_should_be_prefixed_with_execute___suffexed_with_async.severity = suggestion
dotnet_naming_rule.non_public_async_methods_should_be_prefixed_with_execute___suffexed_with_async.symbols = non_public_async_methods
dotnet_naming_rule.non_public_async_methods_should_be_prefixed_with_execute___suffexed_with_async.style = prefixed_with_execute___suffexed_with_async

dotnet_naming_rule.public_method_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.public_method_should_be_pascal_case.symbols = public_method
dotnet_naming_rule.public_method_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.public_property_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.public_property_should_be_pascal_case.symbols = public_property
dotnet_naming_rule.public_property_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.public_static_method_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.public_static_method_should_be_pascal_case.symbols = public_static_method
dotnet_naming_rule.public_static_method_should_be_pascal_case.style = pascal_case

# Symbol specifications

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal
dotnet_naming_symbols.interface.required_modifiers = 

dotnet_naming_symbols.struct.applicable_kinds = struct
dotnet_naming_symbols.struct.applicable_accessibilities = public, internal, private, protected, protected_internal
dotnet_naming_symbols.struct.required_modifiers = 

dotnet_naming_symbols.enum.applicable_kinds = enum
dotnet_naming_symbols.enum.applicable_accessibilities = public, internal, private, protected, protected_internal
dotnet_naming_symbols.enum.required_modifiers = 

dotnet_naming_symbols.delegate.applicable_kinds = delegate
dotnet_naming_symbols.delegate.applicable_accessibilities = public, internal, private, protected, protected_internal
dotnet_naming_symbols.delegate.required_modifiers = 

dotnet_naming_symbols.method.applicable_kinds = method
dotnet_naming_symbols.method.applicable_accessibilities = public
dotnet_naming_symbols.method.required_modifiers = 

dotnet_naming_symbols.private_method.applicable_kinds = method
dotnet_naming_symbols.private_method.applicable_accessibilities = private
dotnet_naming_symbols.private_method.required_modifiers = 

dotnet_naming_symbols.abstract_method.applicable_kinds = method
dotnet_naming_symbols.abstract_method.applicable_accessibilities = public, internal, private, protected, protected_internal
dotnet_naming_symbols.abstract_method.required_modifiers = abstract

dotnet_naming_symbols.static_method.applicable_kinds = method
dotnet_naming_symbols.static_method.applicable_accessibilities = public, internal, private, protected, protected_internal
dotnet_naming_symbols.static_method.required_modifiers = static

dotnet_naming_symbols.property.applicable_kinds = property
dotnet_naming_symbols.property.applicable_accessibilities = public, internal, private, protected, protected_internal
dotnet_naming_symbols.property.required_modifiers = 

dotnet_naming_symbols.public_or_protected_field.applicable_kinds = field
dotnet_naming_symbols.public_or_protected_field.applicable_accessibilities = public, protected
dotnet_naming_symbols.public_or_protected_field.required_modifiers = 

dotnet_naming_symbols.static_field.applicable_kinds = field
dotnet_naming_symbols.static_field.applicable_accessibilities = public, internal, private, protected, protected_internal
dotnet_naming_symbols.static_field.required_modifiers = static

dotnet_naming_symbols.private_or_internal_field.applicable_kinds = field
dotnet_naming_symbols.private_or_internal_field.applicable_accessibilities = internal, private
dotnet_naming_symbols.private_or_internal_field.required_modifiers = 

dotnet_naming_symbols.private_or_internal_static_field.applicable_kinds = field
dotnet_naming_symbols.private_or_internal_static_field.applicable_accessibilities = internal, private
dotnet_naming_symbols.private_or_internal_static_field.required_modifiers = static

dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal
dotnet_naming_symbols.types.required_modifiers = 

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal
dotnet_naming_symbols.non_field_members.required_modifiers = 

dotnet_naming_symbols.async_methods__public_.applicable_kinds = namespace, method
dotnet_naming_symbols.async_methods__public_.applicable_accessibilities = public
dotnet_naming_symbols.async_methods__public_.required_modifiers = async

dotnet_naming_symbols.non_public_async_methods.applicable_kinds = method, local_function
dotnet_naming_symbols.non_public_async_methods.applicable_accessibilities = internal, private, protected, protected_internal
dotnet_naming_symbols.non_public_async_methods.required_modifiers = async

dotnet_naming_symbols.public_method.applicable_kinds = property
dotnet_naming_symbols.public_method.applicable_accessibilities = public, private_protected, local
dotnet_naming_symbols.public_method.required_modifiers = 

dotnet_naming_symbols.public_property.applicable_kinds = method
dotnet_naming_symbols.public_property.applicable_accessibilities = public
dotnet_naming_symbols.public_property.required_modifiers = 

dotnet_naming_symbols.public_static_method.applicable_kinds = method
dotnet_naming_symbols.public_static_method.applicable_accessibilities = public
dotnet_naming_symbols.public_static_method.required_modifiers = static

# Naming styles

dotnet_naming_style.pascal_case.required_prefix = 
dotnet_naming_style.pascal_case.required_suffix = 
dotnet_naming_style.pascal_case.word_separator = 
dotnet_naming_style.pascal_case.capitalization = pascal_case

dotnet_naming_style.begins_with_i.required_prefix = I
dotnet_naming_style.begins_with_i.required_suffix = 
dotnet_naming_style.begins_with_i.word_separator = 
dotnet_naming_style.begins_with_i.capitalization = pascal_case

dotnet_naming_style.camel_case.required_prefix = 
dotnet_naming_style.camel_case.required_suffix = 
dotnet_naming_style.camel_case.word_separator = 
dotnet_naming_style.camel_case.capitalization = camel_case

dotnet_naming_style.all_caps.required_prefix = 
dotnet_naming_style.all_caps.required_suffix = 
dotnet_naming_style.all_caps.word_separator = 
dotnet_naming_style.all_caps.capitalization = all_upper

dotnet_naming_style.private_fields.required_prefix = _
dotnet_naming_style.private_fields.required_suffix = 
dotnet_naming_style.private_fields.word_separator = 
dotnet_naming_style.private_fields.capitalization = camel_case

dotnet_naming_style.lower.required_prefix = 
dotnet_naming_style.lower.required_suffix = 
dotnet_naming_style.lower.word_separator = 
dotnet_naming_style.lower.capitalization = all_lower

dotnet_naming_style.private_static.required_prefix = _
dotnet_naming_style.private_static.required_suffix = 
dotnet_naming_style.private_static.word_separator = 
dotnet_naming_style.private_static.capitalization = all_upper

dotnet_naming_style.suffixedwithasync.required_prefix = 
dotnet_naming_style.suffixedwithasync.required_suffix = Async
dotnet_naming_style.suffixedwithasync.word_separator = 
dotnet_naming_style.suffixedwithasync.capitalization = pascal_case

dotnet_naming_style.prefixed_with_execute___suffexed_with_async.required_prefix = Execute
dotnet_naming_style.prefixed_with_execute___suffexed_with_async.required_suffix = Async
dotnet_naming_style.prefixed_with_execute___suffexed_with_async.word_separator = 
dotnet_naming_style.prefixed_with_execute___suffexed_with_async.capitalization = pascal_case
